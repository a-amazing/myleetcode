dubbo
provider consumer registry admin
dubbo常用协议:
    dubbo TCP长连接 
    http
    hessian
dubbo负载均衡:


rpc重要组件:
    序列化
    

阅读源码部分:
    1.springmvc 参数解析和绑定 @RequestBody + 自定义注解
    2.springboot 自动配置原理 自定义starter
        spring.factory 自动配置   
            @SpringbootApplication
                @SpringBootConfiguration ≈ @Configuration 
                    一个被 @Configuration 标注的类，相当于一个 applicationContext.xml 的配置文件
                附加作用
                @EnableAutoConfiguration
                @ComponentScan 默认扫描当前配置类所在包及子包下的所有组件,exclude 属性会将主启动类、自动配置类屏蔽掉。
        SpringFramework的手动装配
            使用模式注解 @Component 等（Spring2.5+）
            使用配置类 @Configuration 与 @Bean （Spring3.0+）
            使用模块装配 @EnableXXX 与 @Import （Spring3.1+）

        SpringBoot的自动配置完全由 @EnableAutoConfiguration 开启。
            @AutoConfigurationPackage
            @Import(AutoConfigurationImportSelector.class)
            public @interface EnableAutoConfiguration
            组合注解
            @AutoConfigurationPackage --> @Import(AutoConfigurationPackages.Registrar.class) --> 获取主启动类的所在包
            @Import(AutoConfigurationImportSelector.class) --> 导入自动配置类
                AutoConfigurationImportSelector
                    DeferredImportSelector ImportSelector 的一种扩展，在处理完所有 @Configuration 类型的Bean之后运行。当所选导入为 @Conditional 时，这种类型的选择器特别有用。
                    DeferredImportSelector 的执行时机，是在 @Configuration 注解中的其他逻辑被处理完毕之后（包括对 @ImportResource、@Bean 这些注解的处理）再执行，换句话说，DeferredImportSelector 的执行时机比 ImportSelector 更晚。
                public static final String FACTORIES_RESOURCE_LOCATION = "META-INF/spring.factories";
                在 spring-boot-autoconfiguration 包下 META-INF/spring.factories
                取出 org.springframework.boot.autoconfigure.EnableAutoConfiguration 指定的所有自动配置类

                --扩展 SPI全称为 Service Provider Interface，是jdk内置的一种服务提供发现机制
                  SPI规定，所有要预先声明的类都应该放在 META-INF/services 中。配置的文件名是接口/抽象类的全限定名，文件内容是抽象类的子类或接口的实现类的全限定类名，如果有多个，借助换行符，一行一个
                  具体使用时，使用jdk内置的 ServiceLoader 类来加载预先配置好的实现类
                  (必须是接口和实现类的关系)
                  ```ServiceLoader<SpiDemoInterface> loaders = ServiceLoader.load(SpiDemoInterface.class);
                  loaders.foreach(SpiDemoInterface::test);```

                  SpringFramework 实现了自己的SPI技术，相比较于Java原生的SPI更灵活
                  (key-value形式,key可以是任意字符串(如注解的全路径类名))

    3.springbean的生命周期
        测试结果入下
        contruction(构造方法) --> populate(注入属性) --> postConstruction --> init方法(init="") --> 正常注册使用 --> preDestroy --> destroy方法(destroy = "")
        创建bean的源码摘录

mysql
    1.最重要的是索引部分
        索引类型:
            hash --> 等值查询快/无法范围查询 适用于只有等值查询的场景
            有序数组 有序数组在等值查询和范围查询场景中的性能就都非常优秀
                     更新数据的时候就麻烦了，中间插入一个记录就必须得挪动后面所有的记录，成本太高
            二叉树 --> 查询层次太多
                       让一个查询尽量少地读磁盘，就必须让查询过程访问尽量少的数据块
            B+树 -->
                       以 InnoDB 的一个整数字段索引为例，这个 N 差不多是 1200
        sql调优
        explain 执行sql 结果字段
            select_type
            type 最好到最差的连接类型为system、const、eq_reg、ref、range、index和ALL，一般来说，得保证查询至少达到range级别，最好能达到ref
                system、const： 可以将查询的变量转为常量. 如id=1; id为 主键或唯一键.
                eq_ref：        访问索引,返回某单一行的数据.(通常在联表查询时出现，查询使用的索引为主键或惟一键)
                ref：           访问索引,返回某个值的数据.(可以返回多行) 通常使用=时发生 
                range：         这个连接类型使用索引返回一个范围中的行，比如使用>或<查找东西，并且该字段上建有索引时发生的情况(注:不一定好于index) 
                index：         以索引的顺序进行全表扫描，优点是不用排序,缺点是还要全表扫描 
                ALL：           全表扫描，应该尽量避免
            possible_keys 显示可能应用在这张表中的索引 如果为空，表示没有可能应用的索引
            key 实际使用的索引 如果为NULL，则没有使用索引
            key_len 使用的索引的长度
            ref 显示索引的哪一列被使用了，如果可能的话，是一个常数
            rows MySQL认为必须检索的用来返回请求数据的行数
            extra 关于MySQL如何解析查询的额外信息，主要有以下几种(*打头为必须优化项)
                using index： 只用到索引,可以避免访问表，性能很高。 
                using where： 使用到where来过滤数据， 不是所有的where clause都要显示using where. 如以=方式访问索引。
                *using tmporary： 用到临时表去处理当前的查询。
                *using filesort： 用到额外的排序，此时mysql会根据联接类型浏览所有符合条件的记录，并保存排序关键字和行指针，然后排序关键字并按顺序检索行。(当使用order by v1,而没用到索引时,就会使用额外的排序)。
                range checked for eache record(index map:N)： 没有好的索引可以使用。
                Using index for group-by：表明可以在索引中找到分组所需的所有数据，不需要查询实际的表。explain select user_id from t_order group by user_id;

            force index强制走正确的索引
            新建索引或者删掉错误的索引

        覆盖索引 索引中包含了需要查询的字段,无需回表(回主键索引)
        联合索引
        最左匹配原则(包含联合索引的最左匹配和模糊查询 itemname like 'abc%')
        索引下推优化（index condition pushdown --> mysql 5.6) 可以在索引遍历过程中，对索引中包含的字段先做判断，直接过滤掉不满足条件的记录，减少回表次数
        前缀索引 MySQL是支持前缀索引的，定义字符串的一部分作为索引。默认地，如果创建索引的语句不指定前缀长度，那么索引就会包含整个字符串
        反转字符串REVERSE（）函数翻转进行前缀索引,截去前端相同部分进行索引

        条件字段函数操作 where a + 1 = 10000 与 where a = 9999
        隐式类型转换 where id = 1 (id是varchar类型)
        隐式字符编码转换 utf8mb4,utf8，因为utf8mb4是utf8的超集，一旦两个字符比较，就会转换为utf8mb4再比较
    2.为什么使用了索引还是慢查询(使用了索引不代表正确使用索引或者是=查询)
    3.redolog & binlog
        redolog是innodb的物理日志,总大小固定,会循环覆盖
        binlog是server层的归档日志,可以用来做数据备份/恢复
    4.项目优化:
        innodb的锁在执行语句时加锁,直到commit才释放
            将影响条件较大的语句在最后进行执行(最可能造成锁冲突,最影响并发度)
            (如基金会总账户和个人账户,先进行个人账户相关的操作,再进行基金会账户操作)
            (避免产生死锁问题,按照同一个顺序加锁,L1,L2,L3...)

mq:rabbitmq
    1.基础:
    2.rabbitmq listener无法通过@Autowired注入mapper组件
        - CSDN文章中说listener的bean创建早于mapper组件bean
            通过SpringContextHolder工具类



沟通:
    不要让人觉得不喜欢沟通交流